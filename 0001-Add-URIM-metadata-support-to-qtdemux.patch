From ced27df47c89f97d8eb3dcd953a520b5075a3390 Mon Sep 17 00:00:00 2001
From: BH Cho <support@dolby.com>
Date: Fri, 1 Nov 2024 10:44:01 +1100
Subject: [PATCH 1/2] Add URIM metadata support to qtdemux

---
 .../gst-plugins-good/gst/isomp4/fourcc.h      |  1 +
 .../gst-plugins-good/gst/isomp4/qtdemux.c     | 40 +++++++++++++++++++
 .../gst/isomp4/qtdemux_types.c                |  1 +
 3 files changed, 42 insertions(+)

diff --git a/subprojects/gst-plugins-good/gst/isomp4/fourcc.h b/subprojects/gst-plugins-good/gst/isomp4/fourcc.h
index 0865a18c9d..e07c541077 100644
--- a/subprojects/gst-plugins-good/gst/isomp4/fourcc.h
+++ b/subprojects/gst-plugins-good/gst/isomp4/fourcc.h
@@ -444,6 +444,7 @@ G_BEGIN_DECLS
 #define FOURCC_adrm     GST_MAKE_FOURCC('a','d','r','m')
 
 #define FOURCC_metx     GST_MAKE_FOURCC('m','e','t','x')
+#define FOURCC_urim     GST_MAKE_FOURCC('u','r','i','m')
 
 /* ONVIF Export File Format */
 #define FOURCC_cstb     GST_MAKE_FOURCC('c','s','t','b')
diff --git a/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c b/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
index 8e7eb89209..1a0928081f 100644
--- a/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
+++ b/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
@@ -16476,6 +16476,46 @@ qtdemux_meta_caps (GstQTDemux * qtdemux, QtDemuxStream * stream,
 
       break;
     }
+    case FOURCC_urim:{
+      gsize size = QT_UINT32 (stsd_entry_data);
+      GstByteReader reader = GST_BYTE_READER_INIT (stsd_entry_data, size);
+      const gchar *uri;
+      guint8 *urii_buf = NULL;
+
+      if (!gst_byte_reader_skip (&reader, 8 + 6 + 2 + 4 + 8)) {
+        GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
+        break;
+      }
+
+      if (!gst_byte_reader_get_string_utf8 (&reader, &uri)) {
+        GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
+        break;
+      }
+
+      _codec ("Timed Binary Metadata");
+      guint size_remaining = gst_byte_reader_get_remaining(&reader);
+
+      if (size_remaining == 0) {
+        caps =
+            gst_caps_new_simple ("application/octet-stream",
+                                 "uri", G_TYPE_STRING, uri,
+                                 NULL);
+      } else {
+        if (!(gst_byte_reader_dup_data(&reader, size_remaining, &urii_buf))) {
+          GST_WARNING_OBJECT (qtdemux, "Unable to duplicate urim data");
+          break;
+        }
+
+        GstBuffer *init_box = gst_buffer_new_wrapped(urii_buf, size_remaining);
+        caps =
+            gst_caps_new_simple ("application/octet-stream",
+                                 "uri", G_TYPE_STRING, uri,
+                                 "uri-init-box", GST_TYPE_BUFFER, init_box,
+                                 NULL);
+        gst_buffer_unref (init_box);
+      }
+      break;
+    }
     default:
       break;
   }
diff --git a/subprojects/gst-plugins-good/gst/isomp4/qtdemux_types.c b/subprojects/gst-plugins-good/gst/isomp4/qtdemux_types.c
index f6dc28f36f..42d4ee50dd 100644
--- a/subprojects/gst-plugins-good/gst/isomp4/qtdemux_types.c
+++ b/subprojects/gst-plugins-good/gst/isomp4/qtdemux_types.c
@@ -248,6 +248,7 @@ static const QtNodeType qt_node_types[] = {
   {FOURCC_adrm, "AAX DRM key data", 0},
   {FOURCC_vttc, "VTTCueBox 14496-30", QT_FLAG_CONTAINER},
   {FOURCC_metx, "XML MetaData Sample Entry", 0},
+  {FOURCC_urim, "URI Metadata Sample Entry", 0},
   {FOURCC_cstb, "Correct Start Time Box", 0},
   {0, "unknown", 0,},
 };
-- 
2.45.2


From e7602c968fe43a668ff520341159170c832ee28d Mon Sep 17 00:00:00 2001
From: BH Cho <support@dolby.com>
Date: Mon, 23 Jun 2025 10:27:10 +1000
Subject: [PATCH 2/2] Use box sizes in URIM when reading

---
 .../gst-plugins-good/gst/isomp4/qtdemux.c     | 24 ++++++++++++++++---
 1 file changed, 21 insertions(+), 3 deletions(-)

diff --git a/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c b/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
index 1a0928081f..10805a36b4 100644
--- a/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
+++ b/subprojects/gst-plugins-good/gst/isomp4/qtdemux.c
@@ -16481,16 +16481,33 @@ qtdemux_meta_caps (GstQTDemux * qtdemux, QtDemuxStream * stream,
       GstByteReader reader = GST_BYTE_READER_INIT (stsd_entry_data, size);
       const gchar *uri;
       guint8 *urii_buf = NULL;
+      guint32 uri_box_size;
 
-      if (!gst_byte_reader_skip (&reader, 8 + 6 + 2 + 4 + 8)) {
+      if (!gst_byte_reader_skip (&reader, 8 + 6 + 2)) {
+        GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
+        break;
+      }
+
+      if (!gst_byte_reader_get_uint32_be(&reader, &uri_box_size)) {
         GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
         break;
       }
 
+      if (!gst_byte_reader_skip (&reader, 4 + 4)) {
+        GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
+        break;
+      }
+
+      guint reader_position = gst_byte_reader_get_pos(&reader);
       if (!gst_byte_reader_get_string_utf8 (&reader, &uri)) {
         GST_WARNING_OBJECT (qtdemux, "Too short urim sample entry");
         break;
       }
+      guint reader_position2 = gst_byte_reader_get_pos(&reader);
+      if ((reader_position2 - reader_position) != (uri_box_size - 12)) {
+        GST_WARNING_OBJECT (qtdemux, "Box size indicated URI of size %u but get_string_utf8 read %u bytes", uri_box_size - 12, reader_position2 - reader_position);
+        break;
+      }
 
       _codec ("Timed Binary Metadata");
       guint size_remaining = gst_byte_reader_get_remaining(&reader);
@@ -16501,12 +16518,13 @@ qtdemux_meta_caps (GstQTDemux * qtdemux, QtDemuxStream * stream,
                                  "uri", G_TYPE_STRING, uri,
                                  NULL);
       } else {
-        if (!(gst_byte_reader_dup_data(&reader, size_remaining, &urii_buf))) {
+        guint32 uri_box_size;
+        if (!(gst_byte_reader_peek_uint32_be(&reader, &uri_box_size)) || !(gst_byte_reader_dup_data(&reader, uri_box_size, &urii_buf))) {
           GST_WARNING_OBJECT (qtdemux, "Unable to duplicate urim data");
           break;
         }
 
-        GstBuffer *init_box = gst_buffer_new_wrapped(urii_buf, size_remaining);
+        GstBuffer *init_box = gst_buffer_new_wrapped(urii_buf, uri_box_size);
         caps =
             gst_caps_new_simple ("application/octet-stream",
                                  "uri", G_TYPE_STRING, uri,
-- 
2.45.2

